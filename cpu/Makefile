####################################################################################################
##  ERBium - Business Rule Engine Hardware Accelerator
##  Copyright (C) 2020 Fabio Maschi - Systems Group, ETH Zurich

##  This program is free software: you can redistribute it and/or modify it under the terms of the
##  GNU Affero General Public License as published by the Free Software Foundation, either version 3
##  of the License, or (at your option) any later version.

##  This software is provided by the copyright holders and contributors "AS IS" and any express or
##  implied warranties, including, but not limited to, the implied warranties of merchantability and
##  fitness for a particular purpose are disclaimed. In no event shall the copyright holder or
##  contributors be liable for any direct, indirect, incidental, special, exemplary, or
##  consequential damages (including, but not limited to, procurement of substitute goods or
##  services; loss of use, data, or profits; or business interruption) however caused and on any
##  theory of liability, whether in contract, strict liability, or tort (including negligence or
##  otherwise) arising in any way out of the use of this software, even if advised of the 
##  possibility of such damage. See the GNU Affero General Public License for more details.

##  You should have received a copy of the GNU Affero General Public License along with this
##  program. If not, see <http://www.gnu.org/licenses/agpl-3.0.en.html>.
####################################################################################################
# from https://gist.github.com/maxtruxa/4b3929e118914ccef057f8a05c614b0f

# output binary
BIN := erbium_cpu

# source files
SRCS := $(shell find . -name "*.cc")
SRCS := $(patsubst ./%, %, $(SRCS))

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := .o
# intermediate directory for generated dependency files
DEPDIR := .d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := gcc
# C++ compiler
CXX := gcc
# linker
LD := g++
# tar
TAR := tar

# C++ flags
CXXFLAGS :=
# C/C++ flags
CPPFLAGS := -g -Wall -pedantic -fopenmp -std=c++11
# linker flags
LDFLAGS := -fopenmp
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# link object files to binary
LINK.o = $(LD) $(LDFLAGS) $(LDLIBS) -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

# EXEC
HEURISTIC = h2Des
TARGET = hw_emu
ifeq ($(TARGET),hw_emu)
	DATA_INPUT_PATH ?= ../sw/build-zrh_$(HEURISTIC)
else
	DATA_INPUT_PATH ?= ../sw/build-mct_$(HEURISTIC)
endif
DATA_OUTPUT_PATH := ./benchmark
FIRST_BATCH_SIZE := 1
MAX_BATCH_SIZE := 129
ITERATIONS := 1
KERNELS_TO_RUN := 1
KERNEL_CONFIG_TAG := $(ENGINES)e$(shell printf "%X" $(KERNELS_TO_RUN))k

NFA_DATA_FILE := $(DATA_INPUT_PATH)/mem_nfa_edges.bin
WORKLOAD_FILE := $(DATA_INPUT_PATH)/benchmark.bin
RESULT_FILE := $(DATA_OUTPUT_PATH)/res_$(HEURISTIC)_$(KERNEL_CONFIG_TAG).csv
BENCHMARK_FILE := $(DATA_OUTPUT_PATH)/ben_$(HEURISTIC)_$(KERNEL_CONFIG_TAG).csv

.PHONY: all run clean
all: $(BIN)

run: $(BIN)
	- rm -fr $(DATA_OUTPUT_PATH)
	- mkdir $(DATA_OUTPUT_PATH)
	./$(BIN) \
		-n $(NFA_DATA_FILE) \
		-w $(WORKLOAD_FILE) \
		-r $(RESULT_FILE) \
		-o $(BENCHMARK_FILE) \
		-f $(FIRST_BATCH_SIZE) \
		-m $(MAX_BATCH_SIZE) \
		-i $(ITERATIONS) \
		-k $(KERNELS_TO_RUN)

$(BIN): $(OBJS)
	$(LINK.o) $^

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)


.PRECIOUS = $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)

clean:
	rm -fr $(BIN) $(DISTOUTPUT)
	rm -fr $(OBJDIR) $(DEPDIR)
	rm -fr $(DATA_OUTPUT_PATH)